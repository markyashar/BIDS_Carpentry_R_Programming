library("swirl")
swirl()
rep(0, times=40)
rep(c(0, 1, 2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- (num_vect<1)
tf <- num_vect<1
tf
num_vect >= 6
c("My","name","is")
my_char <- c("My", "name", "is")
my_char
install.packages("Rtools", dependencies=TRUE)
install.packages("igraph", dependencies=TRUE)
library(igraph)
install.packages("png", dependencies=TRUE)
install.packages("RCurl", dependencies=TRUE)
install.packages("ggmap", dependencies=TRUE)
install.packages("RgoogleMaps", dependencies=TRUE)
install.packages("adegenet", dependencies=TRUE)
install.packages("OutbreakTools", dependencies=TRUE)
install.packages("outbreaker", dependencies=TRUE)
library(outbreaker)
data(fakeOutbreak)
class(fakeOutbreak)
names(fakeOutbreak)
class(fakeOutbreak$dat)
fakeOutbreak$w
fakeOutbreak$collecDates
dat <- fakeOutbreak$dat
w <- fakeOutbreak$w
collecDates <- fakeOutbreak$collecDates
plot(dat, main="Simulated outbreak")
library(gsl)
library(devtools)
install.packages("devtools", dependencies=TRUE)
library(devtools)
install_github("thibautjombart/outbreaker")
library("outbreaker")
exit
quit()
pwd
getwd()
setwd("~/Desktop/data/r-novice-inflammation")
setwd("~/Desktop/r-novice-inflammation/data")
plot_dist(inflammation[1,5,10],threshold=10))
# Write plot_dist() such that we can run
plot_dist <- (inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
if (length(myvector) > threshold){
boxplot(vector)
}
}
hist(inflammation[,10])
?which.max
which.max(c[1,1,3,5])
which.max(c(1,1,3,5)
)
# Write plot_dist() such that we can run
plot_dist <- (inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
if (length(myvector) > threshold){
boxplot(vector)
}
}
# Write plot_dist() such that we can run
plot_dist <- (inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
myvector <- c(1,3,5,9)
if (length(myvector) > threshold){
boxplot(vector)
}
}
}
hist(inflammation[,10])
# Write plot_dist() such that we can run
plot_dist <- (inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
myvector <- c(1,3,5,9)
if (length(myvector) > threshold){
boxplot(vector)
}
plot_dist(inflammation[,10],threshold=10)
}
sessionInfo()
# Write plot_dist() such that we can run
plot_dist <- function((inflammation[,10], threshold)){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
myvector <- c(1,3,5,9)
if (length(myvector) > threshold){
boxplot(vector)
}
plot_dist(inflammation[,10],threshold=10)
}
# Write plot_dist() function such that we can run
plot_dist <- function(inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
myvector <- c(1,3,5,9)
if (length(myvector) > threshold){
boxplot(vector)
}
plot_dist(inflammation[,10],threshold=10)
}
# Find the file containing the patient with the highest inflammation score
# what file is it
# what row is this score in (patient #)
# read in all the names of the inflammation files
filenames = list.files(path="data", pattern="inflammation", full.names = TRUE)
# Write plot_dist() function such that we can run
plot_dist <- function(inflammation[,10], threshold){
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
myvector <- c(1,3,5,9)
if (length(myvector) > threshold){
boxplot(vector)
}
}  plot_dist(inflammation[,10],threshold=10)
# Find the file containing the patient with the highest inflammation score
# what file is it
# what row is this score in (patient #)
# read in all the names of the inflammation files
filenames = list.files(path="data", pattern="inflammation", full.names = TRUE)
# Write plot_dist() function such that we can run
plot_dist <- function(inflammation[,10], threshold){
plot_dist <- function(inflammation[,10] , threshold){
plot_dist <- function(inflammation[,10] , threshold){
setwd("~/Desktop/")
View(dat)
View(dat)
?hist
?boxplot
?? boxplot
str(iris)
iris$Species
species <- iris$Species
head(species)
table(species)
head(iris)
plot(iris$Sepal.Length, iris$Sepal.Width, col=)
levels[iris$Species]
iris$Species[1:3]
legend(levels(iris$Species), col=colpol))
legend("topright", levels(iris$Species), fill = colpal)
colpal = c("red","green","blue")
legend("topright", levels(iris$Species), fill = colpal)
stripchart(inflammation[,10])
plot(iris$Sepal.Length, iris$Sepal.Width, col=colpal[iris$Species])
legend("topright", levels(iris$Species), fill = colpal)
x = c(5,4,na,5, na)
x = c(5,4,8,5, 5)
table(is.na(x))
any(is.na(x))
1/0
> -1/10
> -1/0
-1/0
knitr::opts_chunk$set(echo = TRUE)
```{r iris}
iris
head(iris)
library(ggplot2)
ggplot(iris)
ggplot(iris) +
geom_point()
Sepal.Length
ggplot(iris) +
geom_point(aes(x=Sepal.Length, y = Petal.Length))
ggplot(iris) +
geom_point(aes(x=Sepal.Length, y = Petal.Length, colour = Species))
ggplot(iris) +
geom_point(aes(x=Sepal.Length, y = Petal.Length, colour = Sepal.Width))
ggplot(iris) +
geom_point(aes(x=Sepal.Length, y = Petal.Length, colour = Sepal.Width), size=6, alpha=0.5)
ggplot(iris) +
geom_point(aes(x=Sepal.Length, y = Petal.Length, colour = Sepal.Width), size=6, alpha=0.5) +
geom_smooth(aes(x = Sepal.Length, y= Petal.Length))
ggplot(iris, aes(x=Sepal.Length, y= Petal.Length)) +
geom_point(aes(colour = Sepal.Width), size=6, alpha=0.5) +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y= Petal.Length)) +
geom_point(aes(colour = Sepal.Width), size=6, alpha=0.5) +
geom_smooth() +
theme_classic()
ggplot(iris) +  geom_boxplot(aes(y=Sepal.Width, x = Species))
ggplot(iris) +  geom_violin(aes(y=Sepal.Width, x = Species))
ggplot(iris) +  geom_violin(aes(y=Sepal.Width, x = Species))
ggplot(iris) +  geom_violin(aes(y=Sepal.Width, x = 1))
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
facet_wrap(~Species)
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
facet_wrap(~Species) +
theme_bw()
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
facet_wrap(~Species) +
theme_bw() +
ylab("Sepal Width") +
xlab("")
gridExtra
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
facet_wrap(~Species, ncol = 1) +
theme_bw() +
ylab("Sepal Width") +
xlab("")
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
geom_jitter(aes(x=1, y=Sepal.Wideth))+
facet_wrap(~Species) +
theme_bw() +
ylab("Sepal Width") +
xlab("")
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
geom_jitter(aes(x=1, y=Sepal.Width))+
facet_wrap(~Species) +
theme_bw() +
ylab("Sepal Width") +
xlab("")
ggplot(iris) +  geom_violin(aes(x=1, y=Sepal.Width )) +
geom_jitter(aes(x=1, y=Sepal.Width, col=Petal.Length))+
facet_wrap(~Species) +
theme_bw() +
ylab("Sepal Width") +
xlab("")
# gridExtra -- package worth
install.packages("dplyr")
library(dplyr)
iris %>% head()
iris %>%
filter(Species= "setosa") %>%
summarize(mean_sepal_length = mean(Sepal.Length))
iris %>%
filter(Species == "setosa") %>%
summarize(mean_sepal_length = mean(Sepal.Length))
iris %>%
group_by(Species) %>%
summarize(mean_sepal_length = mean(Sepal.Length))
?group_by
ggplot() +
geom_boxplot(aes(x=1, y=mean_sepal_length))
iris %>%
filter(Species == "setosa") %>%
summarize(mean_sepal_length = mean(Sepal.Length))
iris %>%
group_by(Species) %>%
summarize(mean_sepal_length = mean(Sepal.Length))
ggplot() +
geom_boxplot(aes(x=1, y=mean_sepal_length))
iris %>%
group_by(Species) %>%
summarize(mean_sepal_length = mean(Sepal.Length)) %>%
ggplot() +
geom_boxplot(aes(x=1, y=mean_sepal_length))
# Write plot_dist() function such that we can run
plot_dist <- function(myvector, threshold){
# your input variable names are myvector and threshold
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
if (length(myvector) > threshold){
boxplot(vector)
}
}
plot_dist(inflammation[,10],threshold=10)
# Write plot_dist() function such that we can run
plot_dist <- function(myvector, threshold){
# your input variable names are myvector and threshold
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
if (length(myvector) > threshold){
boxplot(vector)
}
}
plot_dist(inflammation[,10],threshold=10)
# define a variable for inflammation_01.csv
inflammation <- read.csv(file = "data/inflammation-01.csv", header = FALSE)
# Setting the working directory to the Desitop
setwd(dir = "~/Desktop/r-novice-inflammation/")
# Read in the inflammation-01.csv file
read.csv(file = "data/inflammation-01.csv", header = FALSE)
# Write plot_dist() function such that we can run
plot_dist <- function(myvector, threshold){
# your input variable names are myvector and threshold
# write a statement that checks if the length of myvector is greater than the value of threshold
# HINT: IF
if (length(myvector) > threshold){
boxplot(vector)
}
}
plot_dist(inflammation[,10],threshold=10)
myvector <- c(1,3,5,9)
plot_dist(myvector,threshold=10)
plot_dist(myvector,threshold=10)
